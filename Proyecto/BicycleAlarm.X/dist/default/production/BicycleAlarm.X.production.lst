

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Dec 14 22:42:19 2020

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25  0000                     
    26                           ; Version 1.44
    27                           ; Generated 14/09/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  000C1E                     __pidataCOMRAM:
    63                           	opt stack 0
    64                           
    65                           ;initializer for _numVeces
    66  000C1E  0002               	dw	2
    67                           
    68                           ;initializer for _n
    69  000C20  0001               	dw	1
    70                           
    71                           	psect	smallconst
    72  000800                     __psmallconst:
    73                           	opt stack 0
    74  000800  00                 	db	0
    75  000801                     _TECLAS:
    76                           	opt stack 0
    77  000801  31                 	db	49
    78  000802  32                 	db	50
    79  000803  33                 	db	51
    80  000804  41                 	db	65
    81  000805  34                 	db	52
    82  000806  35                 	db	53
    83  000807  36                 	db	54
    84  000808  42                 	db	66
    85  000809  37                 	db	55
    86  00080A  38                 	db	56
    87  00080B  39                 	db	57
    88  00080C  43                 	db	67
    89  00080D  2A                 	db	42
    90  00080E  30                 	db	48
    91  00080F  23                 	db	35
    92  000810  44                 	db	68
    93  000811                     __end_of_TECLAS:
    94                           	opt stack 0
    95  000811                     _password:
    96                           	opt stack 0
    97  000811  31                 	db	49
    98  000812  32                 	db	50
    99  000813  33                 	db	51
   100  000814  41                 	db	65
   101  000815                     __end_of_password:
   102                           	opt stack 0
   103  0000                     _TRISD	set	3989
   104  0000                     _ADCON1bits	set	4033
   105  0000                     _OSCCON	set	4051
   106  0000                     _PORTB	set	3969
   107  0000                     _PORTBbits	set	3969
   108  0000                     _LATB	set	3978
   109  0000                     _TRISB	set	3987
   110  0000                     _RD3	set	31771
   111  0000                     _RD2	set	31770
   112  0000                     _RD7	set	31775
   113  0000                     _RD6	set	31774
   114  0000                     _RD5	set	31773
   115  0000                     _RD4	set	31772
   116  000815                     STR_1:
   117  000815  42                 	db	66	;'B'
   118  000816  49                 	db	73	;'I'
   119  000817  43                 	db	67	;'C'
   120  000818  59                 	db	89	;'Y'
   121  000819  43                 	db	67	;'C'
   122  00081A  4C                 	db	76	;'L'
   123  00081B  45                 	db	69	;'E'
   124  00081C  20                 	db	32
   125  00081D  41                 	db	65	;'A'
   126  00081E  4C                 	db	76	;'L'
   127  00081F  41                 	db	65	;'A'
   128  000820  52                 	db	82	;'R'
   129  000821  4D                 	db	77	;'M'
   130  000822  00                 	db	0
   131  000823                     STR_2:
   132  000823  50                 	db	80	;'P'
   133  000824  61                 	db	97	;'a'
   134  000825  73                 	db	115	;'s'
   135  000826  73                 	db	115	;'s'
   136  000827  77                 	db	119	;'w'
   137  000828  6F                 	db	111	;'o'
   138  000829  72                 	db	114	;'r'
   139  00082A  64                 	db	100	;'d'
   140  00082B  3B                 	db	59	;';'
   141  00082C  00                 	db	0
   142                           
   143                           ; #config settings
   144  00082D  00                 	db	0	; dummy byte at the end
   145  0000                     
   146                           	psect	cinit
   147  000B7A                     __pcinit:
   148                           	opt stack 0
   149  000B7A                     start_initialization:
   150                           	opt stack 0
   151  000B7A                     __initialization:
   152                           	opt stack 0
   153                           
   154                           ; Initialize objects allocated to COMRAM (4 bytes)
   155                           ; load TBLPTR registers with __pidataCOMRAM
   156  000B7A  0E1E               	movlw	low __pidataCOMRAM
   157  000B7C  6EF6               	movwf	tblptrl,c
   158  000B7E  0E0C               	movlw	high __pidataCOMRAM
   159  000B80  6EF7               	movwf	tblptrh,c
   160  000B82  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   161  000B84  6EF8               	movwf	tblptru,c
   162  000B86  EE00  F053         	lfsr	0,__pdataCOMRAM
   163  000B8A  EE10 F004          	lfsr	1,4
   164  000B8E                     copy_data0:
   165  000B8E  0009               	tblrd		*+
   166  000B90  CFF5 FFEE          	movff	tablat,postinc0
   167  000B94  50E5               	movf	postdec1,w,c
   168  000B96  50E1               	movf	fsr1l,w,c
   169  000B98  E1FA               	bnz	copy_data0
   170                           
   171                           ; Clear objects allocated to COMRAM (59 bytes)
   172  000B9A  EE00  F001         	lfsr	0,__pbssCOMRAM
   173  000B9E  0E3B               	movlw	59
   174  000BA0                     clear_0:
   175  000BA0  6AEE               	clrf	postinc0,c
   176  000BA2  06E8               	decf	wreg,f,c
   177  000BA4  E1FD               	bnz	clear_0
   178  000BA6                     end_of_initialization:
   179                           	opt stack 0
   180  000BA6                     __end_of__initialization:
   181                           	opt stack 0
   182  000BA6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   183  000BA8  6EF8               	movwf	tblptru,c
   184  000BAA  0100               	movlb	0
   185  000BAC  EF6F  F004         	goto	_main	;jump to C main() function
   186                           tblptru	equ	0xFF8
   187                           tblptrh	equ	0xFF7
   188                           tblptrl	equ	0xFF6
   189                           tablat	equ	0xFF5
   190                           postinc0	equ	0xFEE
   191                           wreg	equ	0xFE8
   192                           postdec1	equ	0xFE5
   193                           fsr1l	equ	0xFE1
   194                           
   195                           	psect	bssCOMRAM
   196  000001                     __pbssCOMRAM:
   197                           	opt stack 0
   198  000001                     _buffer_lcd:
   199                           	opt stack 0
   200  000001                     	ds	32
   201  000021                     _numFilas:
   202                           	opt stack 0
   203  000021                     	ds	2
   204  000023                     _posDato:
   205                           	opt stack 0
   206  000023                     	ds	2
   207  000025                     _numColumnas:
   208                           	opt stack 0
   209  000025                     	ds	2
   210  000027                     _contador:
   211                           	opt stack 0
   212  000027                     	ds	2
   213  000029                     _i:
   214                           	opt stack 0
   215  000029                     	ds	2
   216  00002B                     _tecla:
   217                           	opt stack 0
   218  00002B                     	ds	1
   219  00002C                     _dato:
   220                           	opt stack 0
   221  00002C                     	ds	16
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           tblptrl	equ	0xFF6
   225                           tablat	equ	0xFF5
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           postdec1	equ	0xFE5
   229                           fsr1l	equ	0xFE1
   230                           
   231                           	psect	dataCOMRAM
   232  000053                     __pdataCOMRAM:
   233                           	opt stack 0
   234  000053                     _numVeces:
   235                           	opt stack 0
   236  000053                     	ds	2
   237  000055                     _n:
   238                           	opt stack 0
   239  000055                     	ds	2
   240                           tblptru	equ	0xFF8
   241                           tblptrh	equ	0xFF7
   242                           tblptrl	equ	0xFF6
   243                           tablat	equ	0xFF5
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           postdec1	equ	0xFE5
   247                           fsr1l	equ	0xFE1
   248                           
   249                           	psect	cstackCOMRAM
   250  00003C                     __pcstackCOMRAM:
   251                           	opt stack 0
   252  00003C                     Lcd_Port@a:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x0
   256  00003C                     	ds	1
   257  00003D                     ??_Lcd_Cmd:
   258  00003D                     lcd_write_char@temp:
   259                           	opt stack 0
   260                           
   261                           ; 1 bytes @ 0x1
   262  00003D                     	ds	1
   263  00003E                     Lcd_Cmd@a:
   264                           	opt stack 0
   265  00003E                     lcd_write_char@y:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x2
   269  00003E                     	ds	1
   270  00003F                     ??_lcd_init:
   271  00003F                     lcd_posCursor@b:
   272                           	opt stack 0
   273  00003F                     lcd_write_char@a:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x3
   277  00003F                     	ds	1
   278  000040                     lcd_posCursor@a:
   279                           	opt stack 0
   280  000040                     lcd_putc@a:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x4
   284  000040                     	ds	1
   285  000041                     lcd_posCursor@z:
   286                           	opt stack 0
   287                           
   288                           ; 1 bytes @ 0x5
   289  000041                     	ds	1
   290  000042                     ??_lcd_putc:
   291  000042                     lcd_posCursor@y:
   292                           	opt stack 0
   293                           
   294                           ; 1 bytes @ 0x6
   295  000042                     	ds	1
   296  000043                     lcd_posCursor@temp:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x7
   300  000043                     	ds	1
   301  000044                     lcd_putc@i:
   302                           	opt stack 0
   303  000044                     imprimir@pDato:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x8
   307  000044                     	ds	2
   308  000046                     imprimir@pPosicion:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0xA
   312  000046                     	ds	2
   313  000048                     imprimir@pNumVeces:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0xC
   317  000048                     	ds	2
   318  00004A                     ??_imprimir:
   319                           
   320                           ; 1 bytes @ 0xE
   321  00004A                     	ds	1
   322  00004B                     imprimir@numVeces:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0xF
   326  00004B                     	ds	2
   327  00004D                     ??_antiRebote:
   328                           
   329                           ; 1 bytes @ 0x11
   330  00004D                     	ds	4
   331  000051                     ??_main:
   332                           
   333                           ; 1 bytes @ 0x15
   334  000051                     	ds	2
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           postdec1	equ	0xFE5
   342                           fsr1l	equ	0xFE1
   343                           
   344 ;;
   345 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   346 ;;
   347 ;; *************** function _main *****************
   348 ;; Defined at:
   349 ;;		line 64 in file "Main.c"
   350 ;; Parameters:    Size  Location     Type
   351 ;;		None
   352 ;; Auto vars:     Size  Location     Type
   353 ;;		None
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      void 
   356 ;; Registers used:
   357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   363 ;;      Params:         0       0       0       0       0       0       0       0       0
   364 ;;      Locals:         0       0       0       0       0       0       0       0       0
   365 ;;      Temps:          2       0       0       0       0       0       0       0       0
   366 ;;      Totals:         2       0       0       0       0       0       0       0       0
   367 ;;Total ram usage:        2 bytes
   368 ;; Hardware stack levels required when called:    6
   369 ;; This function calls:
   370 ;;		_capturar_password
   371 ;;		_lcd_clear
   372 ;;		_lcd_init
   373 ;;		_lcd_posCursor
   374 ;;		_lcd_putc
   375 ;; This function is called by:
   376 ;;		Startup code after reset
   377 ;; This function uses a non-reentrant model
   378 ;;
   379                           
   380                           	psect	text0
   381  0008DE                     __ptext0:
   382                           	opt stack 0
   383  0008DE                     _main:
   384                           	opt stack 25
   385                           
   386                           ;Main.c: 66: OSCCON = 0x72 ;
   387                           
   388                           ;incstack = 0
   389  0008DE  0E72               	movlw	114
   390  0008E0  6ED3               	movwf	4051,c	;volatile
   391                           
   392                           ;Main.c: 67: ADCON1bits.PCFG=0b1111;
   393  0008E2  80C1               	bsf	4033,0,c	;volatile
   394  0008E4  82C1               	bsf	4033,1,c	;volatile
   395  0008E6  84C1               	bsf	4033,2,c	;volatile
   396  0008E8  86C1               	bsf	4033,3,c	;volatile
   397                           
   398                           ;Main.c: 68: PORTB&(1<<4);
   399  0008EA  5081               	movf	3969,w,c	;volatile
   400                           
   401                           ;Main.c: 69: PORTB&(1<<5);
   402  0008EC  5081               	movf	3969,w,c	;volatile
   403                           
   404                           ;Main.c: 70: PORTB&(1<<6);
   405  0008EE  5081               	movf	3969,w,c	;volatile
   406                           
   407                           ;Main.c: 71: PORTB&(1<<7);
   408  0008F0  5081               	movf	3969,w,c	;volatile
   409                           
   410                           ;Main.c: 72: TRISB&=~((1<<0)|(1<<1)|(1<<2)|(1<<3));
   411  0008F2  0EF0               	movlw	240
   412  0008F4  1693               	andwf	3987,f,c	;volatile
   413                           
   414                           ;Main.c: 73: LATB&((1<<0)|(1<<1)|(1<<2)|(1<<3));
   415  0008F6  508A               	movf	3978,w,c	;volatile
   416                           
   417                           ;Main.c: 74: TRISD=0x00;
   418  0008F8  0E00               	movlw	0
   419  0008FA  6E95               	movwf	3989,c	;volatile
   420                           
   421                           ;Main.c: 75: lcd_init();
   422  0008FC  ECF6  F004         	call	_lcd_init	;wreg free
   423                           
   424                           ;Main.c: 76: lcd_clear();
   425  000900  EC08  F006         	call	_lcd_clear	;wreg free
   426                           
   427                           ;Main.c: 77: lcd_posCursor(1,1);
   428  000904  0E01               	movlw	1
   429  000906  6E3F               	movwf	lcd_posCursor@b,c
   430  000908  0E01               	movlw	1
   431  00090A  EC2E  F005         	call	_lcd_posCursor
   432                           
   433                           ;Main.c: 78: lcd_putc("BICYCLE ALARM");
   434  00090E  0E15               	movlw	low STR_1
   435  000910  6E40               	movwf	lcd_putc@a,c
   436  000912  0E08               	movlw	high STR_1
   437  000914  6E41               	movwf	lcd_putc@a+1,c
   438  000916  EC7C  F005         	call	_lcd_putc	;wreg free
   439                           
   440                           ;Main.c: 79: _delay((unsigned long)((500)*(8000000/4000.0)));
   441  00091A  0E06               	movlw	6
   442  00091C  6E52               	movwf	(??_main+1)& (0+255),c
   443  00091E  0E13               	movlw	19
   444  000920  6E51               	movwf	??_main& (0+255),c
   445  000922  0EAE               	movlw	174
   446  000924                     u527:
   447  000924  2EE8               	decfsz	wreg,f,c
   448  000926  D7FE               	bra	u527
   449  000928  2E51               	decfsz	??_main& (0+255),f,c
   450  00092A  D7FC               	bra	u527
   451  00092C  2E52               	decfsz	(??_main+1)& (0+255),f,c
   452  00092E  D7FA               	bra	u527
   453                           
   454                           ;Main.c: 80: lcd_clear();
   455  000930  EC08  F006         	call	_lcd_clear	;wreg free
   456                           
   457                           ;Main.c: 81: lcd_posCursor(1,1);
   458  000934  0E01               	movlw	1
   459  000936  6E3F               	movwf	lcd_posCursor@b,c
   460  000938  0E01               	movlw	1
   461  00093A  EC2E  F005         	call	_lcd_posCursor
   462                           
   463                           ;Main.c: 82: lcd_putc("Password;");
   464  00093E  0E23               	movlw	low STR_2
   465  000940  6E40               	movwf	lcd_putc@a,c
   466  000942  0E08               	movlw	high STR_2
   467  000944  6E41               	movwf	lcd_putc@a+1,c
   468  000946  EC7C  F005         	call	_lcd_putc	;wreg free
   469                           
   470                           ;Main.c: 83: _delay((unsigned long)((500)*(8000000/4000.0)));
   471  00094A  0E06               	movlw	6
   472  00094C  6E52               	movwf	(??_main+1)& (0+255),c
   473  00094E  0E13               	movlw	19
   474  000950  6E51               	movwf	??_main& (0+255),c
   475  000952  0EAE               	movlw	174
   476  000954                     u537:
   477  000954  2EE8               	decfsz	wreg,f,c
   478  000956  D7FE               	bra	u537
   479  000958  2E51               	decfsz	??_main& (0+255),f,c
   480  00095A  D7FC               	bra	u537
   481  00095C  2E52               	decfsz	(??_main+1)& (0+255),f,c
   482  00095E  D7FA               	bra	u537
   483  000960                     
   484                           ;Main.c: 87: {
   485                           ;Main.c: 89: capturar_password();
   486  000960  ECB3  F004         	call	_capturar_password	;wreg free
   487  000964  D7FD               	goto	l175
   488  000966                     __end_of_main:
   489                           	opt stack 0
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           postinc0	equ	0xFEE
   495                           wreg	equ	0xFE8
   496                           postdec1	equ	0xFE5
   497                           fsr1l	equ	0xFE1
   498                           
   499 ;; *************** function _lcd_putc *****************
   500 ;; Defined at:
   501 ;;		line 117 in file "LCD.h"
   502 ;; Parameters:    Size  Location     Type
   503 ;;  a               2    4[COMRAM] PTR unsigned char 
   504 ;;		 -> STR_2(10), STR_1(14), 
   505 ;; Auto vars:     Size  Location     Type
   506 ;;  i               2    8[COMRAM] int 
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   516 ;;      Params:         2       0       0       0       0       0       0       0       0
   517 ;;      Locals:         2       0       0       0       0       0       0       0       0
   518 ;;      Temps:          2       0       0       0       0       0       0       0       0
   519 ;;      Totals:         6       0       0       0       0       0       0       0       0
   520 ;;Total ram usage:        6 bytes
   521 ;; Hardware stack levels used:    1
   522 ;; Hardware stack levels required when called:    2
   523 ;; This function calls:
   524 ;;		_lcd_write_char
   525 ;; This function is called by:
   526 ;;		_main
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530                           	psect	text1
   531  000AF8                     __ptext1:
   532                           	opt stack 0
   533  000AF8                     _lcd_putc:
   534                           	opt stack 28
   535                           
   536                           ;LCD.h: 119: int i;
   537                           ;LCD.h: 120: for(i=0;a[i]!='\0';i++)
   538                           
   539                           ;incstack = 0
   540  000AF8  0E00               	movlw	0
   541  000AFA  6E45               	movwf	lcd_putc@i+1,c
   542  000AFC  0E00               	movlw	0
   543  000AFE  6E44               	movwf	lcd_putc@i,c
   544  000B00  D010               	goto	l114
   545  000B02                     
   546                           ;LCD.h: 121: lcd_write_char(a[i]);
   547  000B02  5044               	movf	lcd_putc@i,w,c
   548  000B04  2440               	addwf	lcd_putc@a,w,c
   549  000B06  6E42               	movwf	??_lcd_putc& (0+255),c
   550  000B08  5045               	movf	lcd_putc@i+1,w,c
   551  000B0A  2041               	addwfc	lcd_putc@a+1,w,c
   552  000B0C  6E43               	movwf	(??_lcd_putc+1)& (0+255),c
   553  000B0E  C042  FFF6         	movff	??_lcd_putc,tblptrl
   554  000B12  C043  FFF7         	movff	??_lcd_putc+1,tblptrh
   555  000B16                     	if	0	;tblptru may be non-zero
   556  000B16                     	endif
   557  000B16                     	if	0	;tblptru may be non-zero
   558  000B16                     	endif
   559  000B16  0008               	tblrd		*
   560  000B18  50F5               	movf	tablat,w,c
   561  000B1A  ECA1  F005         	call	_lcd_write_char
   562  000B1E  4A44               	infsnz	lcd_putc@i,f,c
   563  000B20  2A45               	incf	lcd_putc@i+1,f,c
   564  000B22                     l114:
   565  000B22  5044               	movf	lcd_putc@i,w,c
   566  000B24  2440               	addwf	lcd_putc@a,w,c
   567  000B26  6E42               	movwf	??_lcd_putc& (0+255),c
   568  000B28  5045               	movf	lcd_putc@i+1,w,c
   569  000B2A  2041               	addwfc	lcd_putc@a+1,w,c
   570  000B2C  6E43               	movwf	(??_lcd_putc+1)& (0+255),c
   571  000B2E  C042  FFF6         	movff	??_lcd_putc,tblptrl
   572  000B32  C043  FFF7         	movff	??_lcd_putc+1,tblptrh
   573  000B36                     	if	0	;tblptru may be non-zero
   574  000B36                     	endif
   575  000B36                     	if	0	;tblptru may be non-zero
   576  000B36                     	endif
   577  000B36  0008               	tblrd		*
   578  000B38  50F5               	movf	tablat,w,c
   579  000B3A  0900               	iorlw	0
   580  000B3C  B4D8               	btfsc	status,2,c
   581  000B3E  0012               	return	
   582  000B40  D7E0               	goto	l115
   583  000B42                     __end_of_lcd_putc:
   584                           	opt stack 0
   585                           tblptru	equ	0xFF8
   586                           tblptrh	equ	0xFF7
   587                           tblptrl	equ	0xFF6
   588                           tablat	equ	0xFF5
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           postdec1	equ	0xFE5
   592                           fsr1l	equ	0xFE1
   593                           status	equ	0xFD8
   594                           
   595 ;; *************** function _lcd_init *****************
   596 ;; Defined at:
   597 ;;		line 82 in file "LCD.h"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		wreg, status,2, cstack
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   611 ;;      Params:         0       0       0       0       0       0       0       0       0
   612 ;;      Locals:         0       0       0       0       0       0       0       0       0
   613 ;;      Temps:          1       0       0       0       0       0       0       0       0
   614 ;;      Totals:         1       0       0       0       0       0       0       0       0
   615 ;;Total ram usage:        1 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; Hardware stack levels required when called:    2
   618 ;; This function calls:
   619 ;;		_Lcd_Cmd
   620 ;;		_Lcd_Port
   621 ;; This function is called by:
   622 ;;		_main
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626                           	psect	text2
   627  0009EC                     __ptext2:
   628                           	opt stack 0
   629  0009EC                     _lcd_init:
   630                           	opt stack 28
   631                           
   632                           ;LCD.h: 84: Lcd_Port(0x00);
   633                           
   634                           ;incstack = 0
   635  0009EC  0E00               	movlw	0
   636  0009EE  ECD8  F005         	call	_Lcd_Port
   637                           
   638                           ;LCD.h: 85: _delay((unsigned long)((20)*(8000000/4000.0)));
   639  0009F2  0E34               	movlw	52
   640  0009F4  6E3F               	movwf	??_lcd_init& (0+255),c
   641  0009F6  0EF2               	movlw	242
   642  0009F8                     u547:
   643  0009F8  2EE8               	decfsz	wreg,f,c
   644  0009FA  D7FE               	bra	u547
   645  0009FC  2E3F               	decfsz	??_lcd_init& (0+255),f,c
   646  0009FE  D7FC               	bra	u547
   647                           
   648                           ;LCD.h: 86: Lcd_Cmd(0x03);
   649  000A00  0E03               	movlw	3
   650  000A02  ECEE  F005         	call	_Lcd_Cmd
   651                           
   652                           ;LCD.h: 87: _delay((unsigned long)((5)*(8000000/4000.0)));
   653  000A06  0E0D               	movlw	13
   654  000A08  6E3F               	movwf	??_lcd_init& (0+255),c
   655  000A0A  0EFC               	movlw	252
   656  000A0C                     u557:
   657  000A0C  2EE8               	decfsz	wreg,f,c
   658  000A0E  D7FE               	bra	u557
   659  000A10  2E3F               	decfsz	??_lcd_init& (0+255),f,c
   660  000A12  D7FC               	bra	u557
   661                           
   662                           ;LCD.h: 88: Lcd_Cmd(0x03);
   663  000A14  0E03               	movlw	3
   664  000A16  ECEE  F005         	call	_Lcd_Cmd
   665                           
   666                           ;LCD.h: 89: _delay((unsigned long)((11)*(8000000/4000.0)));
   667  000A1A  0E1D               	movlw	29
   668  000A1C  6E3F               	movwf	??_lcd_init& (0+255),c
   669  000A1E  0E91               	movlw	145
   670  000A20                     u567:
   671  000A20  2EE8               	decfsz	wreg,f,c
   672  000A22  D7FE               	bra	u567
   673  000A24  2E3F               	decfsz	??_lcd_init& (0+255),f,c
   674  000A26  D7FC               	bra	u567
   675  000A28  F000               	nop	
   676                           
   677                           ;LCD.h: 90: Lcd_Cmd(0x03);
   678  000A2A  0E03               	movlw	3
   679  000A2C  ECEE  F005         	call	_Lcd_Cmd
   680                           
   681                           ;LCD.h: 92: Lcd_Cmd(0x02);
   682  000A30  0E02               	movlw	2
   683  000A32  ECEE  F005         	call	_Lcd_Cmd
   684                           
   685                           ;LCD.h: 93: Lcd_Cmd(0x02);
   686  000A36  0E02               	movlw	2
   687  000A38  ECEE  F005         	call	_Lcd_Cmd
   688                           
   689                           ;LCD.h: 94: Lcd_Cmd(0x08);
   690  000A3C  0E08               	movlw	8
   691  000A3E  ECEE  F005         	call	_Lcd_Cmd
   692                           
   693                           ;LCD.h: 95: Lcd_Cmd(0x00);
   694  000A42  0E00               	movlw	0
   695  000A44  ECEE  F005         	call	_Lcd_Cmd
   696                           
   697                           ;LCD.h: 96: Lcd_Cmd(0x0C);
   698  000A48  0E0C               	movlw	12
   699  000A4A  ECEE  F005         	call	_Lcd_Cmd
   700                           
   701                           ;LCD.h: 97: Lcd_Cmd(0x00);
   702  000A4E  0E00               	movlw	0
   703  000A50  ECEE  F005         	call	_Lcd_Cmd
   704                           
   705                           ;LCD.h: 98: Lcd_Cmd(0x06);
   706  000A54  0E06               	movlw	6
   707  000A56  ECEE  F005         	call	_Lcd_Cmd
   708  000A5A  0012               	return		;funcret
   709  000A5C                     __end_of_lcd_init:
   710                           	opt stack 0
   711                           tblptru	equ	0xFF8
   712                           tblptrh	equ	0xFF7
   713                           tblptrl	equ	0xFF6
   714                           tablat	equ	0xFF5
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           postdec1	equ	0xFE5
   718                           fsr1l	equ	0xFE1
   719                           status	equ	0xFD8
   720                           
   721 ;; *************** function _capturar_password *****************
   722 ;; Defined at:
   723 ;;		line 132 in file "Main.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;		None
   728 ;; Return value:  Size  Location     Type
   729 ;;                  1    wreg      void 
   730 ;; Registers used:
   731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   737 ;;      Params:         0       0       0       0       0       0       0       0       0
   738 ;;      Locals:         0       0       0       0       0       0       0       0       0
   739 ;;      Temps:          0       0       0       0       0       0       0       0       0
   740 ;;      Totals:         0       0       0       0       0       0       0       0       0
   741 ;;Total ram usage:        0 bytes
   742 ;; Hardware stack levels used:    1
   743 ;; Hardware stack levels required when called:    5
   744 ;; This function calls:
   745 ;;		_Columnas
   746 ;;		_antiRebote
   747 ;; This function is called by:
   748 ;;		_main
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text3
   753  000966                     __ptext3:
   754                           	opt stack 0
   755  000966                     _capturar_password:
   756                           	opt stack 25
   757                           
   758                           ;Main.c: 134: if(contador<4)
   759                           
   760                           ;incstack = 0
   761  000966  BE28               	btfsc	_contador+1,7,c
   762  000968  D006               	goto	u460
   763  00096A  5028               	movf	_contador+1,w,c
   764  00096C  E115               	bnz	l1235
   765  00096E  0E04               	movlw	4
   766  000970  5C27               	subwf	_contador,w,c
   767  000972  B0D8               	btfsc	status,0,c
   768  000974  D011               	goto	l197
   769  000976                     u460:
   770                           
   771                           ;Main.c: 135: {
   772                           ;Main.c: 136: numFilas=contador;
   773  000976  C027  F021         	movff	_contador,_numFilas
   774  00097A  C028  F022         	movff	_contador+1,_numFilas+1
   775                           
   776                           ;Main.c: 137: LATB=~n;
   777  00097E  5055               	movf	_n,w,c
   778  000980  0AFF               	xorlw	255
   779  000982  6E8A               	movwf	3978,c	;volatile
   780                           
   781                           ;Main.c: 138: n=n<<1;
   782  000984  90D8               	bcf	status,0,c
   783  000986  3455               	rlcf	_n,w,c
   784  000988  6E55               	movwf	_n,c
   785  00098A  3456               	rlcf	_n+1,w,c
   786  00098C  6E56               	movwf	_n+1,c
   787                           
   788                           ;Main.c: 139: ++contador;
   789  00098E  4A27               	infsnz	_contador,f,c
   790  000990  2A28               	incf	_contador+1,f,c
   791                           
   792                           ;Main.c: 140: Columnas();
   793  000992  ECFE  F005         	call	_Columnas	;wreg free
   794                           
   795                           ;Main.c: 141: }
   796  000996  D009               	goto	l198
   797  000998                     l197:
   798  000998                     l1235:
   799                           
   800                           ;Main.c: 142: else
   801                           ;Main.c: 143: {
   802                           ;Main.c: 144: contador=0;
   803  000998  0E00               	movlw	0
   804  00099A  6E28               	movwf	_contador+1,c
   805  00099C  0E00               	movlw	0
   806  00099E  6E27               	movwf	_contador,c
   807                           
   808                           ;Main.c: 145: LATB=0xFF;
   809  0009A0  688A               	setf	3978,c	;volatile
   810                           
   811                           ;Main.c: 146: n=1;
   812  0009A2  0E00               	movlw	0
   813  0009A4  6E56               	movwf	_n+1,c
   814  0009A6  0E01               	movlw	1
   815  0009A8  6E55               	movwf	_n,c
   816  0009AA                     l198:
   817                           
   818                           ;Main.c: 147: }
   819                           ;Main.c: 149: if(Columnas())
   820  0009AA  ECFE  F005         	call	_Columnas	;wreg free
   821  0009AE  A0D8               	btfss	status,0,c
   822  0009B0  0012               	return	
   823                           
   824                           ;Main.c: 150: {
   825                           ;Main.c: 151: if((PORTB&(1<<4))==0)
   826  0009B2  B881               	btfsc	3969,4,c	;volatile
   827  0009B4  D004               	goto	l200
   828                           
   829                           ;Main.c: 152: {
   830                           ;Main.c: 153: numColumnas=0;
   831  0009B6  0E00               	movlw	0
   832  0009B8  6E26               	movwf	_numColumnas+1,c
   833  0009BA  0E00               	movlw	0
   834  0009BC  D011               	goto	L3
   835  0009BE                     l200:
   836                           
   837                           ;Main.c: 155: else if((PORTB&(1<<5))==0)
   838  0009BE  BA81               	btfsc	3969,5,c	;volatile
   839  0009C0  D004               	goto	l202
   840                           
   841                           ;Main.c: 156: {
   842                           ;Main.c: 157: numColumnas=1;
   843  0009C2  0E00               	movlw	0
   844  0009C4  6E26               	movwf	_numColumnas+1,c
   845  0009C6  0E01               	movlw	1
   846  0009C8  D00B               	goto	L3
   847  0009CA                     l202:
   848                           
   849                           ;Main.c: 159: else if((PORTB&(1<<6))==0)
   850  0009CA  BC81               	btfsc	3969,6,c	;volatile
   851  0009CC  D004               	goto	l204
   852                           
   853                           ;Main.c: 160: {
   854                           ;Main.c: 161: numColumnas=2;
   855  0009CE  0E00               	movlw	0
   856  0009D0  6E26               	movwf	_numColumnas+1,c
   857  0009D2  0E02               	movlw	2
   858  0009D4  D005               	goto	L3
   859  0009D6                     l204:
   860                           
   861                           ;Main.c: 163: else if((PORTB&(1<<7))==0)
   862  0009D6  BE81               	btfsc	3969,7,c	;volatile
   863  0009D8  D004               	goto	l206
   864                           
   865                           ;Main.c: 164: {
   866                           ;Main.c: 165: numColumnas=3;
   867  0009DA  0E00               	movlw	0
   868  0009DC  6E26               	movwf	_numColumnas+1,c
   869  0009DE  0E03               	movlw	3
   870  0009E0                     L3:
   871  0009E0  6E25               	movwf	_numColumnas,c
   872  0009E2                     l206:
   873                           
   874                           ;Main.c: 166: }
   875                           ;Main.c: 167: antiRebote();
   876  0009E2  EC17  F004         	call	_antiRebote	;wreg free
   877                           
   878                           ;Main.c: 168: numVeces++;
   879  0009E6  4A53               	infsnz	_numVeces,f,c
   880  0009E8  2A54               	incf	_numVeces+1,f,c
   881  0009EA  0012               	return	
   882  0009EC                     __end_of_capturar_password:
   883                           	opt stack 0
   884                           tblptru	equ	0xFF8
   885                           tblptrh	equ	0xFF7
   886                           tblptrl	equ	0xFF6
   887                           tablat	equ	0xFF5
   888                           postinc0	equ	0xFEE
   889                           wreg	equ	0xFE8
   890                           postdec1	equ	0xFE5
   891                           fsr1l	equ	0xFE1
   892                           status	equ	0xFD8
   893                           
   894 ;; *************** function _antiRebote *****************
   895 ;; Defined at:
   896 ;;		line 94 in file "Main.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;		None
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      void 
   903 ;; Registers used:
   904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   910 ;;      Params:         0       0       0       0       0       0       0       0       0
   911 ;;      Locals:         0       0       0       0       0       0       0       0       0
   912 ;;      Temps:          4       0       0       0       0       0       0       0       0
   913 ;;      Totals:         4       0       0       0       0       0       0       0       0
   914 ;;Total ram usage:        4 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; Hardware stack levels required when called:    4
   917 ;; This function calls:
   918 ;;		_imprimir
   919 ;;		_lcd_clear
   920 ;;		_lcd_posCursor
   921 ;;		_lcd_write_char
   922 ;; This function is called by:
   923 ;;		_capturar_password
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           	psect	text4
   928  00082E                     __ptext4:
   929                           	opt stack 0
   930  00082E                     _antiRebote:
   931                           	opt stack 25
   932                           
   933                           ;Main.c: 100: _delay((unsigned long)((300)*(8000000/4000.0)));
   934                           
   935                           ;Main.c: 99: while(PORTB&(1<<7)==0);
   936                           
   937                           ;Main.c: 98: while(PORTB&(1<<6)==0);
   938                           
   939                           ;Main.c: 97: while(PORTB&(1<<5)==0);
   940                           
   941                           ;Main.c: 96: while(PORTB&(1<<4)==0);
   942                           
   943                           ;incstack = 0
   944  00082E  0E04               	movlw	4
   945  000830  6E4E               	movwf	(??_antiRebote+1)& (0+255),c
   946  000832  0E0C               	movlw	12
   947  000834  6E4D               	movwf	??_antiRebote& (0+255),c
   948  000836  0E34               	movlw	52
   949  000838                     u577:
   950  000838  2EE8               	decfsz	wreg,f,c
   951  00083A  D7FE               	bra	u577
   952  00083C  2E4D               	decfsz	??_antiRebote& (0+255),f,c
   953  00083E  D7FC               	bra	u577
   954  000840  2E4E               	decfsz	(??_antiRebote+1)& (0+255),f,c
   955  000842  D7FA               	bra	u577
   956                           
   957                           ;Main.c: 101: dato[posDato]=TECLAS[numFilas][numColumnas];
   958  000844  C021  F04D         	movff	_numFilas,??_antiRebote
   959  000848  C022  F04E         	movff	_numFilas+1,??_antiRebote+1
   960  00084C  90D8               	bcf	status,0,c
   961  00084E  364D               	rlcf	??_antiRebote,f,c
   962  000850  364E               	rlcf	??_antiRebote+1,f,c
   963  000852  90D8               	bcf	status,0,c
   964  000854  364D               	rlcf	??_antiRebote,f,c
   965  000856  364E               	rlcf	??_antiRebote+1,f,c
   966  000858  0E01               	movlw	low _TECLAS
   967  00085A  6E4F               	movwf	(??_antiRebote+2)& (0+255),c
   968  00085C  0E08               	movlw	high _TECLAS
   969  00085E  6E50               	movwf	(??_antiRebote+3)& (0+255),c
   970  000860  504D               	movf	??_antiRebote,w,c
   971  000862  264F               	addwf	??_antiRebote+2,f,c
   972  000864  504E               	movf	??_antiRebote+1,w,c
   973  000866  2250               	addwfc	??_antiRebote+3,f,c
   974  000868  5025               	movf	_numColumnas,w,c
   975  00086A  264F               	addwf	??_antiRebote+2,f,c
   976  00086C  5026               	movf	_numColumnas+1,w,c
   977  00086E  2250               	addwfc	??_antiRebote+3,f,c
   978  000870  C04F  FFF6         	movff	??_antiRebote+2,tblptrl
   979  000874  C050  FFF7         	movff	??_antiRebote+3,tblptrh
   980  000878                     	if	0	;tblptru may be non-zero
   981  000878                     	endif
   982  000878                     	if	0	;tblptru may be non-zero
   983  000878                     	endif
   984  000878  0E2C               	movlw	low _dato
   985  00087A  2423               	addwf	_posDato,w,c
   986  00087C  6ED9               	movwf	fsr2l,c
   987  00087E  0E00               	movlw	high _dato
   988  000880  2024               	addwfc	_posDato+1,w,c
   989  000882  6EDA               	movwf	fsr2h,c
   990  000884  0008               	tblrd		*
   991  000886  CFF5 FFDF          	movff	tablat,indf2
   992                           
   993                           ;Main.c: 103: tecla = '*';
   994  00088A  0E2A               	movlw	42
   995  00088C  6E2B               	movwf	_tecla,c
   996                           
   997                           ;Main.c: 109: if(dato[posDato] =='D'){
   998  00088E  0E2C               	movlw	low _dato
   999  000890  2423               	addwf	_posDato,w,c
  1000  000892  6ED9               	movwf	fsr2l,c
  1001  000894  0E00               	movlw	high _dato
  1002  000896  2024               	addwfc	_posDato+1,w,c
  1003  000898  6EDA               	movwf	fsr2h,c
  1004  00089A  0E44               	movlw	68
  1005  00089C  18DE               	xorwf	postinc2,w,c
  1006  00089E  A4D8               	btfss	status,2,c
  1007  0008A0  D013               	goto	l193
  1008                           
  1009                           ;Main.c: 110: lcd_clear();
  1010  0008A2  EC08  F006         	call	_lcd_clear	;wreg free
  1011                           
  1012                           ;Main.c: 116: imprimir(dato, posDato-1,numVeces);
  1013  0008A6  0E2C               	movlw	low _dato
  1014  0008A8  6E44               	movwf	imprimir@pDato,c
  1015  0008AA  0E00               	movlw	high _dato
  1016  0008AC  6E45               	movwf	imprimir@pDato+1,c
  1017  0008AE  0EFF               	movlw	255
  1018  0008B0  2423               	addwf	_posDato,w,c
  1019  0008B2  6E46               	movwf	imprimir@pPosicion,c
  1020  0008B4  0EFF               	movlw	255
  1021  0008B6  2024               	addwfc	_posDato+1,w,c
  1022  0008B8  6E47               	movwf	imprimir@pPosicion+1,c
  1023  0008BA  C053  F048         	movff	_numVeces,imprimir@pNumVeces
  1024  0008BE  C054  F049         	movff	_numVeces+1,imprimir@pNumVeces+1
  1025  0008C2  EC56  F005         	call	_imprimir	;wreg free
  1026                           
  1027                           ;Main.c: 117: return;
  1028  0008C6  0012               	return	
  1029  0008C8                     l193:
  1030                           
  1031                           ;Main.c: 118: }
  1032                           ;Main.c: 119: lcd_write_char(tecla);
  1033  0008C8  502B               	movf	_tecla,w,c
  1034  0008CA  ECA1  F005         	call	_lcd_write_char
  1035                           
  1036                           ;Main.c: 124: lcd_posCursor(numVeces,1);
  1037  0008CE  0E01               	movlw	1
  1038  0008D0  6E3F               	movwf	lcd_posCursor@b,c
  1039  0008D2  5053               	movf	_numVeces,w,c
  1040  0008D4  EC2E  F005         	call	_lcd_posCursor
  1041                           
  1042                           ;Main.c: 128: posDato++;
  1043  0008D8  4A23               	infsnz	_posDato,f,c
  1044  0008DA  2A24               	incf	_posDato+1,f,c
  1045  0008DC  0012               	return		;funcret
  1046  0008DE                     __end_of_antiRebote:
  1047                           	opt stack 0
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           postdec1	equ	0xFE5
  1055                           fsr1l	equ	0xFE1
  1056                           indf2	equ	0xFDF
  1057                           postinc2	equ	0xFDE
  1058                           fsr2h	equ	0xFDA
  1059                           fsr2l	equ	0xFD9
  1060                           status	equ	0xFD8
  1061                           
  1062 ;; *************** function _lcd_clear *****************
  1063 ;; Defined at:
  1064 ;;		line 55 in file "LCD.h"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;		None
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;		None
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  1    wreg      void 
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1078 ;;      Params:         0       0       0       0       0       0       0       0       0
  1079 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1080 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1081 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1082 ;;Total ram usage:        0 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    2
  1085 ;; This function calls:
  1086 ;;		_Lcd_Cmd
  1087 ;; This function is called by:
  1088 ;;		_main
  1089 ;;		_antiRebote
  1090 ;;		_tecla_OK
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           	psect	text5
  1095  000C10                     __ptext5:
  1096                           	opt stack 0
  1097  000C10                     _lcd_clear:
  1098                           	opt stack 28
  1099                           
  1100                           ;LCD.h: 57: Lcd_Cmd(0);
  1101                           
  1102                           ;incstack = 0
  1103  000C10  0E00               	movlw	0
  1104  000C12  ECEE  F005         	call	_Lcd_Cmd
  1105                           
  1106                           ;LCD.h: 58: Lcd_Cmd(1);
  1107  000C16  0E01               	movlw	1
  1108  000C18  ECEE  F005         	call	_Lcd_Cmd
  1109  000C1C  0012               	return		;funcret
  1110  000C1E                     __end_of_lcd_clear:
  1111                           	opt stack 0
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           postdec1	equ	0xFE5
  1119                           fsr1l	equ	0xFE1
  1120                           indf2	equ	0xFDF
  1121                           postinc2	equ	0xFDE
  1122                           fsr2h	equ	0xFDA
  1123                           fsr2l	equ	0xFD9
  1124                           status	equ	0xFD8
  1125                           
  1126 ;; *************** function _imprimir *****************
  1127 ;; Defined at:
  1128 ;;		line 29 in file "Utilidades.h"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;  pDato           2    8[COMRAM] PTR unsigned char 
  1131 ;;		 -> dato(16), 
  1132 ;;  pPosicion       2   10[COMRAM] int 
  1133 ;;  pNumVeces       2   12[COMRAM] int 
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;  numVeces        2   15[COMRAM] int 
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      void 
  1138 ;; Registers used:
  1139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1145 ;;      Params:         6       0       0       0       0       0       0       0       0
  1146 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1147 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1148 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1149 ;;Total ram usage:        9 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; Hardware stack levels required when called:    3
  1152 ;; This function calls:
  1153 ;;		_lcd_posCursor
  1154 ;;		_lcd_write_char
  1155 ;; This function is called by:
  1156 ;;		_antiRebote
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text6
  1161  000AAC                     __ptext6:
  1162                           	opt stack 0
  1163  000AAC                     _imprimir:
  1164                           	opt stack 25
  1165                           
  1166                           ;Utilidades.h: 30: int numVeces=1;
  1167                           
  1168                           ;incstack = 0
  1169  000AAC  0E00               	movlw	0
  1170  000AAE  6E4C               	movwf	imprimir@numVeces+1,c
  1171  000AB0  0E01               	movlw	1
  1172  000AB2  6E4B               	movwf	imprimir@numVeces,c
  1173                           
  1174                           ;Utilidades.h: 31: for(i=0;i<= pPosicion; i++){
  1175  000AB4  0E00               	movlw	0
  1176  000AB6  6E2A               	movwf	_i+1,c
  1177  000AB8  0E00               	movlw	0
  1178  000ABA  6E29               	movwf	_i,c
  1179  000ABC  D012               	goto	l132
  1180  000ABE                     
  1181                           ;Utilidades.h: 32: lcd_write_char(pDato[i]);
  1182  000ABE  5029               	movf	_i,w,c
  1183  000AC0  2444               	addwf	imprimir@pDato,w,c
  1184  000AC2  6ED9               	movwf	fsr2l,c
  1185  000AC4  502A               	movf	_i+1,w,c
  1186  000AC6  2045               	addwfc	imprimir@pDato+1,w,c
  1187  000AC8  6EDA               	movwf	fsr2h,c
  1188  000ACA  50DF               	movf	indf2,w,c
  1189  000ACC  ECA1  F005         	call	_lcd_write_char
  1190                           
  1191                           ;Utilidades.h: 33: lcd_posCursor(pNumVeces,1);
  1192  000AD0  0E01               	movlw	1
  1193  000AD2  6E3F               	movwf	lcd_posCursor@b,c
  1194  000AD4  5048               	movf	imprimir@pNumVeces,w,c
  1195  000AD6  EC2E  F005         	call	_lcd_posCursor
  1196                           
  1197                           ;Utilidades.h: 34: pNumVeces++;
  1198  000ADA  4A48               	infsnz	imprimir@pNumVeces,f,c
  1199  000ADC  2A49               	incf	imprimir@pNumVeces+1,f,c
  1200  000ADE  4A29               	infsnz	_i,f,c
  1201  000AE0  2A2A               	incf	_i+1,f,c
  1202  000AE2                     l132:
  1203  000AE2  5029               	movf	_i,w,c
  1204  000AE4  5C46               	subwf	imprimir@pPosicion,w,c
  1205  000AE6  5047               	movf	imprimir@pPosicion+1,w,c
  1206  000AE8  0A80               	xorlw	128
  1207  000AEA  6E4A               	movwf	??_imprimir& (0+255),c
  1208  000AEC  502A               	movf	_i+1,w,c
  1209  000AEE  0A80               	xorlw	128
  1210  000AF0  584A               	subwfb	??_imprimir& (0+255),w,c
  1211  000AF2  A0D8               	btfss	status,0,c
  1212  000AF4  0012               	return	
  1213  000AF6  D7E3               	goto	l133
  1214  000AF8                     __end_of_imprimir:
  1215                           	opt stack 0
  1216                           tblptru	equ	0xFF8
  1217                           tblptrh	equ	0xFF7
  1218                           tblptrl	equ	0xFF6
  1219                           tablat	equ	0xFF5
  1220                           postinc0	equ	0xFEE
  1221                           wreg	equ	0xFE8
  1222                           postdec1	equ	0xFE5
  1223                           fsr1l	equ	0xFE1
  1224                           indf2	equ	0xFDF
  1225                           postinc2	equ	0xFDE
  1226                           fsr2h	equ	0xFDA
  1227                           fsr2l	equ	0xFD9
  1228                           status	equ	0xFD8
  1229                           
  1230 ;; *************** function _lcd_write_char *****************
  1231 ;; Defined at:
  1232 ;;		line 101 in file "LCD.h"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  a               1    wreg     unsigned char 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  a               1    3[COMRAM] unsigned char 
  1237 ;;  y               1    2[COMRAM] unsigned char 
  1238 ;;  temp            1    1[COMRAM] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, status,2, status,0, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1248 ;;      Params:         0       0       0       0       0       0       0       0       0
  1249 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1251 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1252 ;;Total ram usage:        3 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    1
  1255 ;; This function calls:
  1256 ;;		_Lcd_Port
  1257 ;; This function is called by:
  1258 ;;		_lcd_putc
  1259 ;;		_imprimir
  1260 ;;		_antiRebote
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           	psect	text7
  1265  000B42                     __ptext7:
  1266                           	opt stack 0
  1267  000B42                     _lcd_write_char:
  1268                           	opt stack 28
  1269                           
  1270                           ;incstack = 0
  1271                           ;lcd_write_char@a stored from wreg
  1272  000B42  6E3F               	movwf	lcd_write_char@a,c
  1273                           
  1274                           ;LCD.h: 103: char temp,y;
  1275                           ;LCD.h: 104: temp = a&0x0F;
  1276  000B44  503F               	movf	lcd_write_char@a,w,c
  1277  000B46  0B0F               	andlw	15
  1278  000B48  6E3D               	movwf	lcd_write_char@temp,c
  1279                           
  1280                           ;LCD.h: 105: y = a&0xF0;
  1281  000B4A  503F               	movf	lcd_write_char@a,w,c
  1282  000B4C  0BF0               	andlw	240
  1283  000B4E  6E3E               	movwf	lcd_write_char@y,c
  1284                           
  1285                           ;LCD.h: 106: RD2 = 1;
  1286  000B50  8483               	bsf	3971,2,c	;volatile
  1287                           
  1288                           ;LCD.h: 107: Lcd_Port(y>>4);
  1289  000B52  383E               	swapf	lcd_write_char@y,w,c
  1290  000B54  0B0F               	andlw	15
  1291  000B56  ECD8  F005         	call	_Lcd_Port
  1292                           
  1293                           ;LCD.h: 108: RD3 = 1;
  1294  000B5A  8683               	bsf	3971,3,c	;volatile
  1295                           
  1296                           ;LCD.h: 109: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1297  000B5C  0E1A               	movlw	26
  1298  000B5E                     u587:
  1299  000B5E  2EE8               	decfsz	wreg,f,c
  1300  000B60  D7FE               	bra	u587
  1301  000B62  D000               	nop2	
  1302                           
  1303                           ;LCD.h: 110: RD3 = 0;
  1304  000B64  9683               	bcf	3971,3,c	;volatile
  1305                           
  1306                           ;LCD.h: 111: Lcd_Port(temp);
  1307  000B66  503D               	movf	lcd_write_char@temp,w,c
  1308  000B68  ECD8  F005         	call	_Lcd_Port
  1309                           
  1310                           ;LCD.h: 112: RD3 = 1;
  1311  000B6C  8683               	bsf	3971,3,c	;volatile
  1312                           
  1313                           ;LCD.h: 113: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1314  000B6E  0E1A               	movlw	26
  1315  000B70                     u597:
  1316  000B70  2EE8               	decfsz	wreg,f,c
  1317  000B72  D7FE               	bra	u597
  1318  000B74  D000               	nop2	
  1319                           
  1320                           ;LCD.h: 114: RD3 = 0;
  1321  000B76  9683               	bcf	3971,3,c	;volatile
  1322  000B78  0012               	return		;funcret
  1323  000B7A                     __end_of_lcd_write_char:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           postinc0	equ	0xFEE
  1330                           wreg	equ	0xFE8
  1331                           postdec1	equ	0xFE5
  1332                           fsr1l	equ	0xFE1
  1333                           indf2	equ	0xFDF
  1334                           postinc2	equ	0xFDE
  1335                           fsr2h	equ	0xFDA
  1336                           fsr2l	equ	0xFD9
  1337                           status	equ	0xFD8
  1338                           
  1339 ;; *************** function _lcd_posCursor *****************
  1340 ;; Defined at:
  1341 ;;		line 61 in file "LCD.h"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;  a               1    wreg     unsigned char 
  1344 ;;  b               1    3[COMRAM] unsigned char 
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;  a               1    4[COMRAM] unsigned char 
  1347 ;;  temp            1    7[COMRAM] unsigned char 
  1348 ;;  y               1    6[COMRAM] unsigned char 
  1349 ;;  z               1    5[COMRAM] unsigned char 
  1350 ;; Return value:  Size  Location     Type
  1351 ;;                  1    wreg      void 
  1352 ;; Registers used:
  1353 ;;		wreg, status,2, status,0, cstack
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1359 ;;      Params:         1       0       0       0       0       0       0       0       0
  1360 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1361 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1362 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1363 ;;Total ram usage:        5 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; Hardware stack levels required when called:    2
  1366 ;; This function calls:
  1367 ;;		_Lcd_Cmd
  1368 ;; This function is called by:
  1369 ;;		_imprimir
  1370 ;;		_main
  1371 ;;		_antiRebote
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text8
  1376  000A5C                     __ptext8:
  1377                           	opt stack 0
  1378  000A5C                     _lcd_posCursor:
  1379                           	opt stack 28
  1380                           
  1381                           ;incstack = 0
  1382                           ;lcd_posCursor@a stored from wreg
  1383  000A5C  6E40               	movwf	lcd_posCursor@a,c
  1384                           
  1385                           ;LCD.h: 63: char temp,z,y;
  1386                           ;LCD.h: 64: if(a == 1)
  1387  000A5E  0440               	decf	lcd_posCursor@a,w,c
  1388  000A60  A4D8               	btfss	status,2,c
  1389  000A62  D010               	goto	l102
  1390                           
  1391                           ;LCD.h: 65: {
  1392                           ;LCD.h: 66: temp = 0x80 + b - 1;
  1393  000A64  503F               	movf	lcd_posCursor@b,w,c
  1394  000A66  0F7F               	addlw	127
  1395  000A68  6E43               	movwf	lcd_posCursor@temp,c
  1396                           
  1397                           ;LCD.h: 67: z = temp>>4;
  1398  000A6A  3843               	swapf	lcd_posCursor@temp,w,c
  1399  000A6C  0B0F               	andlw	15
  1400  000A6E  6E41               	movwf	lcd_posCursor@z,c
  1401                           
  1402                           ;LCD.h: 68: y = temp & 0x0F;
  1403  000A70  5043               	movf	lcd_posCursor@temp,w,c
  1404  000A72  0B0F               	andlw	15
  1405  000A74  6E42               	movwf	lcd_posCursor@y,c
  1406                           
  1407                           ;LCD.h: 69: Lcd_Cmd(z);
  1408  000A76  5041               	movf	lcd_posCursor@z,w,c
  1409  000A78  ECEE  F005         	call	_Lcd_Cmd
  1410                           
  1411                           ;LCD.h: 70: Lcd_Cmd(y);
  1412  000A7C  5042               	movf	lcd_posCursor@y,w,c
  1413  000A7E  ECEE  F005         	call	_Lcd_Cmd
  1414                           
  1415                           ;LCD.h: 71: }
  1416  000A82  0012               	return	
  1417  000A84                     l102:
  1418                           
  1419                           ;LCD.h: 72: else if(a == 2)
  1420  000A84  0E02               	movlw	2
  1421  000A86  1840               	xorwf	lcd_posCursor@a,w,c
  1422  000A88  A4D8               	btfss	status,2,c
  1423  000A8A  0012               	return	
  1424                           
  1425                           ;LCD.h: 73: {
  1426                           ;LCD.h: 74: temp = 0xC0 + b - 1;
  1427  000A8C  503F               	movf	lcd_posCursor@b,w,c
  1428  000A8E  0FBF               	addlw	191
  1429  000A90  6E43               	movwf	lcd_posCursor@temp,c
  1430                           
  1431                           ;LCD.h: 75: z = temp>>4;
  1432  000A92  3843               	swapf	lcd_posCursor@temp,w,c
  1433  000A94  0B0F               	andlw	15
  1434  000A96  6E41               	movwf	lcd_posCursor@z,c
  1435                           
  1436                           ;LCD.h: 76: y = temp & 0x0F;
  1437  000A98  5043               	movf	lcd_posCursor@temp,w,c
  1438  000A9A  0B0F               	andlw	15
  1439  000A9C  6E42               	movwf	lcd_posCursor@y,c
  1440                           
  1441                           ;LCD.h: 77: Lcd_Cmd(z);
  1442  000A9E  5041               	movf	lcd_posCursor@z,w,c
  1443  000AA0  ECEE  F005         	call	_Lcd_Cmd
  1444                           
  1445                           ;LCD.h: 78: Lcd_Cmd(y);
  1446  000AA4  5042               	movf	lcd_posCursor@y,w,c
  1447  000AA6  ECEE  F005         	call	_Lcd_Cmd
  1448  000AAA  0012               	return	
  1449  000AAC                     __end_of_lcd_posCursor:
  1450                           	opt stack 0
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           postdec1	equ	0xFE5
  1458                           fsr1l	equ	0xFE1
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           fsr2h	equ	0xFDA
  1462                           fsr2l	equ	0xFD9
  1463                           status	equ	0xFD8
  1464                           
  1465 ;; *************** function _Lcd_Cmd *****************
  1466 ;; Defined at:
  1467 ;;		line 46 in file "LCD.h"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;  a               1    wreg     unsigned char 
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  a               1    2[COMRAM] unsigned char 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, status,2, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1481 ;;      Params:         0       0       0       0       0       0       0       0       0
  1482 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1483 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1484 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1485 ;;Total ram usage:        2 bytes
  1486 ;; Hardware stack levels used:    1
  1487 ;; Hardware stack levels required when called:    1
  1488 ;; This function calls:
  1489 ;;		_Lcd_Port
  1490 ;; This function is called by:
  1491 ;;		_lcd_clear
  1492 ;;		_lcd_posCursor
  1493 ;;		_lcd_init
  1494 ;;		_lcd_shift_right
  1495 ;;		_lcd_shift_left
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text9
  1500  000BDC                     __ptext9:
  1501                           	opt stack 0
  1502  000BDC                     _Lcd_Cmd:
  1503                           	opt stack 28
  1504                           
  1505                           ;incstack = 0
  1506                           ;Lcd_Cmd@a stored from wreg
  1507  000BDC  6E3E               	movwf	Lcd_Cmd@a,c
  1508                           
  1509                           ;LCD.h: 48: RD2 = 0;
  1510  000BDE  9483               	bcf	3971,2,c	;volatile
  1511                           
  1512                           ;LCD.h: 49: Lcd_Port(a);
  1513  000BE0  503E               	movf	Lcd_Cmd@a,w,c
  1514  000BE2  ECD8  F005         	call	_Lcd_Port
  1515                           
  1516                           ;LCD.h: 50: RD3 = 1;
  1517  000BE6  8683               	bsf	3971,3,c	;volatile
  1518                           
  1519                           ;LCD.h: 51: _delay((unsigned long)((4)*(8000000/4000.0)));
  1520  000BE8  0E0B               	movlw	11
  1521  000BEA  6E3D               	movwf	??_Lcd_Cmd& (0+255),c
  1522  000BEC  0E62               	movlw	98
  1523  000BEE                     u607:
  1524  000BEE  2EE8               	decfsz	wreg,f,c
  1525  000BF0  D7FE               	bra	u607
  1526  000BF2  2E3D               	decfsz	??_Lcd_Cmd& (0+255),f,c
  1527  000BF4  D7FC               	bra	u607
  1528  000BF6  D000               	nop2	
  1529                           
  1530                           ;LCD.h: 52: RD3 = 0;
  1531  000BF8  9683               	bcf	3971,3,c	;volatile
  1532  000BFA  0012               	return		;funcret
  1533  000BFC                     __end_of_Lcd_Cmd:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           postdec1	equ	0xFE5
  1542                           fsr1l	equ	0xFE1
  1543                           indf2	equ	0xFDF
  1544                           postinc2	equ	0xFDE
  1545                           fsr2h	equ	0xFDA
  1546                           fsr2l	equ	0xFD9
  1547                           status	equ	0xFD8
  1548                           
  1549 ;; *************** function _Lcd_Port *****************
  1550 ;; Defined at:
  1551 ;;		line 24 in file "LCD.h"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;  a               1    wreg     unsigned char 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  a               1    0[COMRAM] unsigned char 
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  1    wreg      void 
  1558 ;; Registers used:
  1559 ;;		wreg
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1565 ;;      Params:         0       0       0       0       0       0       0       0       0
  1566 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1568 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1569 ;;Total ram usage:        1 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_Lcd_Cmd
  1575 ;;		_lcd_init
  1576 ;;		_lcd_write_char
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text10
  1581  000BB0                     __ptext10:
  1582                           	opt stack 0
  1583  000BB0                     _Lcd_Port:
  1584                           	opt stack 28
  1585                           
  1586                           ;incstack = 0
  1587                           ;Lcd_Port@a stored from wreg
  1588  000BB0  6E3C               	movwf	Lcd_Port@a,c
  1589                           
  1590                           ;LCD.h: 26: if(a & 1)
  1591  000BB2  A03C               	btfss	Lcd_Port@a,0,c
  1592  000BB4  D002               	goto	l85
  1593                           
  1594                           ;LCD.h: 27: RD4 = 1;
  1595  000BB6  8883               	bsf	3971,4,c	;volatile
  1596  000BB8  D001               	goto	l86
  1597  000BBA                     l85:
  1598                           
  1599                           ;LCD.h: 28: else
  1600                           ;LCD.h: 29: RD4 = 0;
  1601  000BBA  9883               	bcf	3971,4,c	;volatile
  1602  000BBC                     l86:
  1603                           
  1604                           ;LCD.h: 31: if(a & 2)
  1605  000BBC  A23C               	btfss	Lcd_Port@a,1,c
  1606  000BBE  D002               	goto	l87
  1607                           
  1608                           ;LCD.h: 32: RD5 = 1;
  1609  000BC0  8A83               	bsf	3971,5,c	;volatile
  1610  000BC2  D001               	goto	l88
  1611  000BC4                     l87:
  1612                           
  1613                           ;LCD.h: 33: else
  1614                           ;LCD.h: 34: RD5 = 0;
  1615  000BC4  9A83               	bcf	3971,5,c	;volatile
  1616  000BC6                     l88:
  1617                           
  1618                           ;LCD.h: 36: if(a & 4)
  1619  000BC6  A43C               	btfss	Lcd_Port@a,2,c
  1620  000BC8  D002               	goto	l89
  1621                           
  1622                           ;LCD.h: 37: RD6 = 1;
  1623  000BCA  8C83               	bsf	3971,6,c	;volatile
  1624  000BCC  D001               	goto	l90
  1625  000BCE                     l89:
  1626                           
  1627                           ;LCD.h: 38: else
  1628                           ;LCD.h: 39: RD6 = 0;
  1629  000BCE  9C83               	bcf	3971,6,c	;volatile
  1630  000BD0                     l90:
  1631                           
  1632                           ;LCD.h: 41: if(a & 8)
  1633  000BD0  A63C               	btfss	Lcd_Port@a,3,c
  1634  000BD2  D002               	goto	l91
  1635                           
  1636                           ;LCD.h: 42: RD7 = 1;
  1637  000BD4  8E83               	bsf	3971,7,c	;volatile
  1638  000BD6  0012               	return	
  1639  000BD8                     l91:
  1640                           
  1641                           ;LCD.h: 43: else
  1642                           ;LCD.h: 44: RD7 = 0;
  1643  000BD8  9E83               	bcf	3971,7,c	;volatile
  1644  000BDA  0012               	return	
  1645  000BDC                     __end_of_Lcd_Port:
  1646                           	opt stack 0
  1647                           tblptru	equ	0xFF8
  1648                           tblptrh	equ	0xFF7
  1649                           tblptrl	equ	0xFF6
  1650                           tablat	equ	0xFF5
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1l	equ	0xFE1
  1655                           indf2	equ	0xFDF
  1656                           postinc2	equ	0xFDE
  1657                           fsr2h	equ	0xFDA
  1658                           fsr2l	equ	0xFD9
  1659                           status	equ	0xFD8
  1660                           
  1661 ;; *************** function _Columnas *****************
  1662 ;; Defined at:
  1663 ;;		line 55 in file "Main.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;		None
  1668 ;; Return value:  Size  Location     Type
  1669 ;;		None               void
  1670 ;; Registers used:
  1671 ;;		status,0
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1677 ;;      Params:         0       0       0       0       0       0       0       0       0
  1678 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1679 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1680 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1681 ;;Total ram usage:        0 bytes
  1682 ;; Hardware stack levels used:    1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_capturar_password
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text11
  1691  000BFC                     __ptext11:
  1692                           	opt stack 0
  1693  000BFC                     _Columnas:
  1694                           	opt stack 29
  1695                           
  1696                           ;Main.c: 57: if((PORTB&(1<<4))&&(PORTB&(1<<5))&&(PORTB&(1<<6))&&(PORTB&(1<<7)))
  1697                           
  1698                           ;incstack = 0
  1699  000BFC  B881               	btfsc	3969,4,c	;volatile
  1700  000BFE  AA81               	btfss	3969,5,c	;volatile
  1701  000C00  D005               	goto	l168
  1702  000C02  BC81               	btfsc	3969,6,c	;volatile
  1703  000C04  AE81               	btfss	3969,7,c	;volatile
  1704  000C06  D002               	goto	l168
  1705                           
  1706                           ;Main.c: 59: return 0;
  1707  000C08  90D8               	bcf	status,0,c
  1708  000C0A  0012               	return	
  1709  000C0C                     l168:
  1710                           
  1711                           ;Main.c: 60: else
  1712                           ;Main.c: 61: return 1;
  1713  000C0C  80D8               	bsf	status,0,c
  1714  000C0E  0012               	return	
  1715  000C10                     __end_of_Columnas:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           postdec1	equ	0xFE5
  1724                           fsr1l	equ	0xFE1
  1725                           indf2	equ	0xFDF
  1726                           postinc2	equ	0xFDE
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           tblptru	equ	0xFF8
  1731                           tblptrh	equ	0xFF7
  1732                           tblptrl	equ	0xFF6
  1733                           tablat	equ	0xFF5
  1734                           postinc0	equ	0xFEE
  1735                           wreg	equ	0xFE8
  1736                           postdec1	equ	0xFE5
  1737                           fsr1l	equ	0xFE1
  1738                           indf2	equ	0xFDF
  1739                           postinc2	equ	0xFDE
  1740                           fsr2h	equ	0xFDA
  1741                           fsr2l	equ	0xFD9
  1742                           status	equ	0xFD8
  1743                           
  1744                           	psect	rparam
  1745  0000                     tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           postinc0	equ	0xFEE
  1750                           wreg	equ	0xFE8
  1751                           postdec1	equ	0xFE5
  1752                           fsr1l	equ	0xFE1
  1753                           indf2	equ	0xFDF
  1754                           postinc2	equ	0xFDE
  1755                           fsr2h	equ	0xFDA
  1756                           fsr2l	equ	0xFD9
  1757                           status	equ	0xFD8


Data Sizes:
    Strings     24
    Constant    20
    Data        4
    BSS         59
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      86
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    imprimir@pDato	PTR unsigned char  size(2) Largest target is 16
		 -> dato(COMRAM[16]), 

    lcd_putc@a	PTR unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[10]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _lcd_putc->_lcd_write_char
    _lcd_init->_Lcd_Cmd
    _capturar_password->_antiRebote
    _antiRebote->_imprimir
    _lcd_clear->_Lcd_Cmd
    _imprimir->_lcd_posCursor
    _lcd_write_char->_Lcd_Port
    _lcd_posCursor->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3130
                                             21 COMRAM     2     2      0
                  _capturar_password
                          _lcd_clear
                           _lcd_init
                      _lcd_posCursor
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             6     4      2     362
                                              4 COMRAM     6     4      2
                     _lcd_write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     135
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _capturar_password                                    0     0      0    1909
                           _Columnas
                         _antiRebote
 ---------------------------------------------------------------------------------
 (2) _antiRebote                                           4     4      0    1909
                                             17 COMRAM     4     4      0
                           _imprimir
                          _lcd_clear
                      _lcd_posCursor
                     _lcd_write_char
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _imprimir                                             9     3      6    1065
                                              8 COMRAM     9     3      6
                      _lcd_posCursor
                     _lcd_write_char
 ---------------------------------------------------------------------------------
 (2) _lcd_write_char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _lcd_posCursor                                        5     4      1     649
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Columnas                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _capturar_password
     _Columnas
     _antiRebote
       _imprimir
         _lcd_posCursor
           _Lcd_Cmd
             _Lcd_Port
         _lcd_write_char
           _Lcd_Port
       _lcd_clear
         _Lcd_Cmd
           _Lcd_Port
       _lcd_posCursor
         _Lcd_Cmd
           _Lcd_Port
       _lcd_write_char
         _Lcd_Port
   _lcd_clear
     _Lcd_Cmd
       _Lcd_Port
   _lcd_init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _lcd_posCursor
     _Lcd_Cmd
       _Lcd_Port
   _lcd_putc
     _lcd_write_char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     17      56       1       90.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      56      20        0.0%
DATA                 0      0      56       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Dec 14 22:42:19 2020

                         _i 0029                           _n 0055                          l90 0BD0  
                        l91 0BD8                          l85 0BBA                          l86 0BBC  
                        l87 0BC4                          l88 0BC6                          l89 0BCE  
               __CFG_BORV$3 000000              ?_lcd_posCursor 003F                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
                       l102 0A84                         l200 09BE                         l202 09CA  
                       l114 0B22                         l115 0B02                         l132 0AE2  
                       l204 09D6                         l133 0ABE                         l206 09E2  
                       l175 0960                         l168 0C0C                         l193 08C8  
                       l197 0998                         l198 09AA                __CFG_CPB$OFF 000000  
                       _RD2 007C1A                         _RD3 007C1B                         _RD4 007C1C  
                       _RD5 007C1D                         _RD6 007C1E                         _RD7 007C1F  
              __CFG_CPD$OFF 000000                         u460 0976                         u607 0BEE  
                       u527 0924                         u537 0954                         u547 09F8  
                       u557 0A0C                         u567 0A20                         u577 0838  
                       u587 0B5E                         u597 0B70                __CFG_BOR$OFF 000000  
                       wreg 000FE8                __CFG_FOSC$HS 000000                __CFG_LVP$OFF 000000  
              __CFG_WDT$OFF 000000                        l1235 0998                        STR_1 0815  
                      STR_2 0823                        _LATB 000F8A             lcd_write_char@a 003F  
           lcd_write_char@y 003E      __end_of_lcd_write_char 0B7A                        _dato 002C  
                      _main 08DE                        indf2 000FDF                        fsr1l 000FE1  
                      fsr2l 000FD9                        start 0000               __CFG_IESO$OFF 000000  
           __end_of_Lcd_Cmd 0BFC               __CFG_MCLRE$ON 000000                ___param_bank 000000  
             __CFG_PLLDIV$1 000000              __CFG_CCP2MX$ON 000000                       ?_main 003C  
                     _PORTB 000F81               __CFG_USBDIV$1 000000                       _TRISB 000F93  
                     _TRISD 000F95               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               imprimir@pDato 0044  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
            __CFG_EBTRB$OFF 000000                       _tecla 002B                       tablat 000FF5  
           ?_lcd_write_char 003C                       status 000FD8  __size_of_capturar_password 0086  
            __CFG_ICPRT$OFF 000000              __CFG_PBADEN$ON 000000            __end_of_Lcd_Port 0BDC  
           __initialization 0B7A                __end_of_main 0966            __end_of_Columnas 0C10  
           ??_lcd_posCursor 0040                      ??_main 0051               __activetblptr 000002  
                    _TECLAS 0801                      _OSCCON 000FD3                   ??_Lcd_Cmd 003D  
            __CFG_XINST$OFF 000000            __end_of_lcd_init 0A5C            __end_of_lcd_putc 0B42  
            __CFG_STVREN$ON 000000                      clear_0 0BA0            __end_of_imprimir 0AF8  
          __end_of_password 0815                __pdataCOMRAM 0053                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                __accesstop 0060     __end_of__initialization 0BA6               ___rparam_used 000001  
            __pcstackCOMRAM 003C          __size_of_lcd_clear 000E                   ?_Lcd_Port 003C  
                 ?_Columnas 003C                  _antiRebote 082E              lcd_posCursor@a 0040  
            lcd_posCursor@b 003F              lcd_posCursor@y 0042              lcd_posCursor@z 0041  
                _buffer_lcd 0001            ??_lcd_write_char 003D                  ??_Lcd_Port 003C  
                 ?_lcd_init 003C                   ?_lcd_putc 0040                  ??_Columnas 003C  
           __CFG_VREGEN$OFF 000000          lcd_write_char@temp 003D                     _Lcd_Cmd 0BDC  
                 ?_imprimir 0044                     __Hparam 0000                     __Lparam 0000  
         __end_of_lcd_clear 0C1E                __psmallconst 0800                     __pcinit 0B7A  
                   __ramtop 0800                     __ptext0 08DE                     __ptext1 0AF8  
                   __ptext2 09EC                     __ptext3 0966                     __ptext4 082E  
                   __ptext5 0C10                     __ptext6 0AAC                     __ptext7 0B42  
                   __ptext8 0A5C                     __ptext9 0BDC                     _posDato 0023  
                ??_lcd_init 003F                  ??_lcd_putc 0042        end_of_initialization 0BA6  
             __Lmediumconst 0000                  ??_imprimir 004A                     postdec1 000FE5  
                   postinc0 000FEE                     postinc2 000FDE                   Lcd_Port@a 003C  
               ?_antiRebote 003C       __end_of_lcd_posCursor 0AAC                   _PORTBbits 000F81  
            __end_of_TECLAS 0811               __pidataCOMRAM 0C1E         start_initialization 0B7A  
         __size_of_Lcd_Port 002C         __size_of_antiRebote 00B0           __size_of_Columnas 0014  
          __CFG_LPT1OSC$OFF 000000                 __pbssCOMRAM 0001           imprimir@pNumVeces 0048  
         imprimir@pPosicion 0046                    ?_Lcd_Cmd 003C           __size_of_lcd_init 0070  
         __size_of_lcd_putc 004A           __size_of_imprimir 004C                   _lcd_clear 0C10  
               __smallconst 0800                    Lcd_Cmd@a 003E            __CFG_WDTPS$32768 000000  
                ?_lcd_clear 003C                ??_antiRebote 004D                  _ADCON1bits 000FC1  
                 lcd_putc@a 0040                   lcd_putc@i 0044                    _Lcd_Port 0BB0  
                 copy_data0 0B8E                    _Columnas 0BFC            __size_of_Lcd_Cmd 0020  
        __end_of_antiRebote 08DE     __size_of_lcd_write_char 0038                    __Hrparam 0000  
                  __Lrparam 0000           lcd_posCursor@temp 0043                    __ptext10 0BB0  
                  __ptext11 0BFC                    _lcd_init 09EC                    _lcd_putc 0AF8  
                  _contador 0027            imprimir@numVeces 004B               __size_of_main 0088  
    __size_of_lcd_posCursor 0050                    _imprimir 0AAC                    _numFilas 0021  
                  _password 0811                    _numVeces 0053                 ??_lcd_clear 003F  
     __CFG_CPUDIV$OSC1_PLL2 000000                 _numColumnas 0025           _capturar_password 0966  
        ?_capturar_password 003C               _lcd_posCursor 0A5C         ??_capturar_password 0051  
 __end_of_capturar_password 09EC              _lcd_write_char 0B42  
